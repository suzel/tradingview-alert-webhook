//@version=4
study("Lesson 3", overlay=true)
lookback = input(title="Lookback Period", type=input.integer, defval=50)
highestHigh = highest(high, lookback)
lowestLow = lowest(low, lookback)
plot(highestHigh, color=color.red, linewidth=2)
plot(lowestLow, color=color.blue, linewidth=2)


//@version=4
study(title="Lesson 6", shorttitle="RSI Swing Signals", overlay=true)

// Get user input
rsiSource = input(title="RSI Source", type=input.source, defval=close)
rsiLength = input(title="RSI Length", type=input.integer, defval=14)
rsiOverbought = input(title="RSI Overbought Level", type=input.integer, defval=70)
rsiOversold = input(title="RSI Oversold Level", type=input.integer, defval=30)

// Get RSI value
rsiValue = rsi(rsiSource, rsiLength)
rsiOB = rsiValue >= rsiOverbought
rsiOS = rsiValue <= rsiOversold

// Identify engulfing candles
bullishEC = close > open[1] and close[1] < open[1]
bearishEC = close < open[1] and close[1] > open[1]
tradeSignal = ((rsiOS or rsiOS[1]) and bullishEC) or ((rsiOB or rsiOB[1]) and bearishEC)

// Plot signals to chart
plotshape(tradeSignal and bullishEC, title="Long", location=location.belowbar, color=color.green, transp=0, style=shape.triangleup, text="Long")
plotshape(tradeSignal and bearishEC, title="Short", location=location.abovebar, color=color.red, transp=0, style=shape.triangledown, text="Short")

// Send out an alert if this candle meets our conditions
alertcondition(tradeSignal, title="RSI Trade Alert!", message="RSI Swing Signal for XXX")



// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© ZenAndTheArtOfTrading

//@version=4
study("Lesson 7", overlay=true)

// Get inputs
atrLength = input(title="ATR Length", type=input.integer, defval=14, minval=1)
useStructure = input(title="Use Structure?", type=input.bool, defval=true)
lookback = input(title="How Far To Look Back For High/Lows", type=input.integer, defval=7, minval=1)
atrStopMultiplier = input(title="ATR Multiplier", type=input.float, defval=1.0, minval=0.1)

// Calculate data
atr = atr(atrLength)
lowestLow = lowest(low, lookback)
highestHigh = highest(high, lookback)
longStop = (useStructure ? lowestLow : close) - atr * atrStopMultiplier
shortStop = (useStructure ? highestHigh : close) + atr * atrStopMultiplier

// Draw data to chart
plot(atr, color=color.blue, title="ATR", transp=100)
plot(longStop, color=color.green, title="Long Trailing Stop", transp=0)
plot(shortStop, color=color.red, title="Short Trailing Stop", transp=0)


//@version=4
study(title="Higher Timeframe EMA", shorttitle="EMA+", overlay=true)

// Get user input
res = input(title="EMA Timeframe", type=input.resolution, defval="D")
len = input(title="EMA Length", type=input.integer, defval=50)
col = input(title="Color EMA", type=input.bool, defval=true)
smooth = input(title="Smooth", type=input.bool, defval=false)

// Calculate EMA
ema = ema(close, len)
emaSmooth = security(syminfo.tickerid, res, ema, barmerge.gaps_on, barmerge.lookahead_off)
emaStep = security(syminfo.tickerid, res, ema, barmerge.gaps_off, barmerge.lookahead_off)

// Draw EMA
plot(smooth ? emaSmooth : emaStep, color=col ? close > emaStep ? color.green : color.red : color.black, style=plot.style_line, linewidth=2, title="EMA (HTF)")



// Created by Matthew J. Slabosz
// www.zenandtheartoftrading.com
// @version=4
study("HTF High/Low", overlay=true)

// Get user input
res = input(title="Timeframe", type=input.resolution, defval="D")

// Create non-repainting security function
rp_security(_symbol, _res, _src) => security(_symbol, _res, _src[barstate.isrealtime ? 1 : 0])

// Get HTF price data
htfHigh = rp_security(syminfo.tickerid, res, high)
htfLow = rp_security(syminfo.tickerid, res, low)

// Plot data to chart
plot(htfHigh, color=color.red, title="HTF High")
plot(htfLow, color=color.blue, title="HTF Low")

// Trigger breakout alerts
alertcondition(close > htfHigh or close < htfLow, title="HTF Breakout Alert!", message="HTF Breakout Alert For: {{ticker}}")



//@version=4
strategy("Take profits & stop losses", overlay=true)

// Create Indicator's
shortSMA = sma(close, 10)
longSMA = sma(close, 30)
rsi = rsi(close, 14)
atr = atr(14)

// Specify crossover conditions
longCondition = crossover(shortSMA, longSMA)
shortCondition = crossunder(shortSMA, longSMA)

// Execute trade if condition is True
if (longCondition)
    stopLoss = low - atr * 2
    takeProfit = high + atr * 2
    strategy.entry("long", strategy.long, 100, when = rsi > 50)
    strategy.exit("exit", "long", stop=stopLoss, limit=takeProfit)

if (shortCondition)
    stopLoss = high + atr * 2
    takeProfit = low - atr * 2
    strategy.entry("short", strategy.short, 100, when = rsi < 50)
    strategy.exit("exit", "short", stop=stopLoss, limit=takeProfit)

// Plot Moving Average's to chart
plot(shortSMA)
plot(longSMA, color=color.black)



//@version=4
strategy("Pair Trade: Apple & Google")

google_close = security("GOOG", "D", close)
google_open = security("GOOG", "D", open)

price_change = google_close / google_open

if price_change < 0.95
    strategy.entry("long", strategy.long, 100)

if price_change > 1.05
    strategy.entry("short", strategy.short, 100)

plot(price_change)



// Daily Open Prices
tdo = security(syminfo.tickerid, 'D', open) // today
ydo = security(syminfo.tickerid, 'D', open[1]) // yesterday
pdo = security(syminfo.tickerid, 'D', open[2]) // 2 days before
odo = security(syminfo.tickerid, 'D', open[3]) // 3 days before

// Daily Close Prices
tdc = security(syminfo.tickerid, 'D', close)
ydc = security(syminfo.tickerid, 'D', close[1])
pdc = security(syminfo.tickerid, 'D', close[2])
odc = security(syminfo.tickerid, 'D', close[3])

// Daily High Prices
tdh = security(syminfo.tickerid, 'D', high)
ydh = security(syminfo.tickerid, 'D', high[1])
pdh = security(syminfo.tickerid, 'D', high[2])
odh = security(syminfo.tickerid, 'D', high[3])
// Daily Low Prices
tdl = security(syminfo.tickerid, 'D', low)
ydl = security(syminfo.tickerid, 'D', low[1])
pdl = security(syminfo.tickerid, 'D', low[2])
odl = security(syminfo.tickerid, 'D', low[3])

// Daily Volumes
tdv = security(syminfo.tickerid, 'D', volume)
ydv = security(syminfo.tickerid, 'D', volume[1])
pdv = security(syminfo.tickerid, 'D', volume[2])
odv = security(syminfo.tickerid, 'D', volume[3])

// Daily Open Prices
tdo = security(syminfo.tickerid, 'D', open) // today
ydo = security(syminfo.tickerid, 'D', open[1]) // yesterday

TodayHasLargerVolumeComparedYesterday()=>
  tdv > ydv? true:false

BearishEngulfingCandle()=>
  (ydc > ydo and tdo > tdc)? (tdo > ydc and tdc < ydo):false

BullishEngulfingCandle()=>
  (ydo > ydc and tdc > tdo)? (tdc > ydo and tdo < ydc):false

TurningBearish=BearishEngulfingCandle()
TurningBullish=BullishEngulfingCandle()

plotchar(TurningBearish, color=color.red, size=size.small)

plotchar(TurningBearish, char='ðŸ“‰', color=color.red, size=size.small)

//@version=4
study(title="My Indicators", shorttitle="My Indicators", overlay=true)
// Daily Price
tdo = security(syminfo.tickerid, 'D', open) //today
ydo = security(syminfo.tickerid, 'D', open[1]) //yesterday
tdc = security(syminfo.tickerid, 'D', close) //today
ydc = security(syminfo.tickerid, 'D', close[1]) //yesterday
BearishEngulfingCandle()=>
  (ydc > ydo and tdo > tdc)? (tdo > ydc and tdc < ydo):false
BullishEngulfingCandle()=>
  (ydo > ydc and tdc > tdo)? (tdc > ydo and tdo < ydc):false
TurningBearish=BearishEngulfingCandle()
TurningBullish=BullishEngulfingCandle()
plotchar(TurningBearish, char='ðŸ“‰', color=color.red, size=size.small)
plotshape(TurningBullish, style='ðŸ“ˆ', color=color.green, location=location.top)




//@version=4
study(title="Golden Line", shorttitle="GLD", overlay=true, resolution="240")
smma(src, length) =>
    smma = 0.0
    smma := na(smma[1]) ? sma(src, length) : (smma[1] * (length - 1) + src) / length
    smma
v1 = smma(hl2, 15)
m1 = smma(hl2, 19)
m2 = smma(hl2, 25)
v2 = smma(hl2, 29)
p2 = v1<m1 != v1<v2 or m2<v2 != v1<v2
p3 = not p2 and v1<v2
p1 = not p2 and not p3
c = p1 ? color.orange : p2 ? color.silver : color.navy
line1 = plot(v1, "Line 1", color=c)
line2 = plot(v2, "Line 2", color=c)
fill(line1, line2, color=c)
